#!/usr/bin/env ruby

require "bundler/setup"
require "optparse"
require "ostruct"

require "diskAudit"
require "diskAudit/constants"

options = OpenStruct.new(output: nil,
                         format: nil,
                         target: "/var/www/html/diskAudit",
                         user: "brown22",
                         mailto: nil)

begin
  OptionParser.new do |o|
    o.banner = "Usage: #{File.basename($0)} [options] dump|remote|local <parameters>"
    o.on("-oFILE","--output FILE","output location for binary output (STDOUT)") {|o| options.output = o}
    o.on("-fFMT","--format FMT",[:txt,:html],"format of output (txt, html)") {|f| options.format = f.to_sym}
    o.on("-tDIR","--target DIR","target directory for report output ('-' for STDOUT)") {|t| options.target = t}
    o.on("-mADDRS","--mailto ADDRS","comma-separated list of addresses to mail to") {|t| options.mailto = t}
    o.on("-uUSER","--user USER","user for ssh to remote hosts") {|u| options.user = u}
    o.on("-v","--version","show version of the software") do
      puts "version #{DiskAudit::VERSION}"
      exit
    end
    o.on_tail("-h","--help","Prints this help") do
      puts o
      exit
    end
  end.parse!
rescue OptionParser::ParseError => pe
  STDERR.puts pe.message
  exit
end

cmd = ARGV[0]
if cmd.nil?
  STDERR.puts "Missing subcommand (\"dump\", \"remote\", \"local\")"
  exit
end

auditor = DiskAudit::DiskAudit.new
case cmd
  when "dump"
    auditor.dump(ARGV[1],options)
  when "remote"
    options.format = :html if options.format.nil?
    auditor.execute_remote(ARGV[1..-1],options)
  when "local"
    options.format = :txt if options.format.nil?
    auditor.execute_local(ARGV[1],options)
  else
    STDERR.puts "Unknown subcommand '#{cmd}' (try \"dump\", \"remote\", \"local\")\n"
end
